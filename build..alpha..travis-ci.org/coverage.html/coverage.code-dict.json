{"/home/travis/build/npmtest/node-npmtest-peer-vnc/test.js":"/* istanbul instrument in package npmtest_peer_vnc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-vnc/lib.npmtest_peer_vnc.js":"/* istanbul instrument in package npmtest_peer_vnc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_peer_vnc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_peer_vnc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-vnc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-peer-vnc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_peer_vnc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_peer_vnc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_peer_vnc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_peer_vnc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_peer_vnc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_peer_vnc.__dirname + '/lib.npmtest_peer_vnc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peer-vnc/node_modules/peer-vnc/index.js":"// noVNC proxy implementation with iWebPP.io\r\n// Copyright (c) 2013 Tom Zhou<iwebpp@gmail.com>\r\n\r\nvar WEBPP = require('iwebpp.io'),\r\n    noVNC = require('./novnc'),\r\n    http = require('http'),\r\n    https = require('https'),\r\n    WebSocket = require('wspp'),\r\n    WebSocketServer = WebSocket.Server,\r\n    Connect = require('connect'),\r\n    OS = require('os'),\r\n    UDT = require('udt');\r\n\r\n\r\n// Debug level\r\n// 1: display error, proxy entry\r\n// 2: display vnc rfb info\r\nvar Debug = 0;\r\n\r\n// Proxy class\r\n// a proxy will contain one iwebpp.io name-client\r\n// -    vncs: array of VNC server host:port pair, like ['localhost:5900', '51dese.com:5901'}] \r\n// -      fn: callback to pass proxy informations\r\n// - options: user custom parameters, like {usrkey: ..., domain: ..., endpoints: ..., turn: ...}\r\n// - options.secmode: ssl, enable ssl/https; acl, enable ssl/https,host-based ACL\r\n// - options.sslmode: srv, only verify server side cert; both, verify both server and client side cert\r\n// -    options.auth: http basic-auth as username:password\r\n// -  options.upload: file upload directory\r\nvar Proxy = module.exports = function(vncs, fn, options){\r\n    var self = this;\r\n       \r\n    if (!(this instanceof Proxy)) return new Proxy(vncs, fn, options);\r\n    \r\n    // check arguments\r\n    if (typeof vncs === 'function') {\r\n        options = fn || {};\r\n        fn = vncs;\r\n        vncs = [];\r\n    } \r\n    \r\n    if (!Array.isArray(vncs)) vncs = [vncs];\r\n        \r\n    // check basic auth\r\n    var basicauth = false;\r\n    if (options && options.auth) {\r\n    \tvar astr = options.auth.split(':');\r\n    \tbasicauth = {username: astr && astr[0], password: astr && astr[1]};\r\n    }\r\n    \r\n    // check upload \r\n    var fileupload = (options && options.upload) || false;\r\n\t\r\n    // 1.\r\n    // proxy URLs\r\n    self.proxyURL = {}; // vURL for VNC server\r\n    \r\n    // websocket proxy servers\r\n    self.proxyWss = {};\r\n    \r\n    // 2.\r\n    // create name client\r\n    var nmcln = self.nmcln = new WEBPP({\r\n        usrinfo: {\r\n            domain: (options && options.domain) || '51dese.com',\r\n            usrkey: (options && options.usrkey) || ('peervnc@'+Date.now())\r\n        },\r\n        \r\n        srvinfo: {\r\n            timeout: 20,\r\n            endpoints: (options && options.endpoints) || [\r\n                {ip: 'iwebpp.com', port: 51686},\r\n                {ip: 'iwebpp.com', port: 51868}\r\n            ],\r\n            turn: (options && options.turn) || [\r\n                {ip: 'iwebpp.com', agent: 51866, proxy: 51688}\r\n            ]\r\n        },\r\n        \r\n        vmode: WEBPP.vURL.URL_MODE_HOST,\r\n        \r\n        // secure mode\r\n        secmode: (options && options.secmode === 'ssl') ? WEBPP.SEP.SEP_SEC_SSL :\r\n                                                          WEBPP.SEP.SEP_SEC_SSL_ACL_HOST,\r\n        // ssl mode\r\n        sslmode: (options && options.sslmode === 'both') ? WEBPP.SEP.SEP_SSL_AUTH_SRV_CLNT : \r\n                                                           WEBPP.SEP.SEP_SSL_AUTH_SRV_ONLY\r\n    });\r\n\t\r\n\t// 2.1\r\n\t// check ready\r\n\tnmcln.once('ready', function(){\r\n\t    if (Debug) console.log('name-client ready on vURL:'+nmcln.vurl);\r\n\t    \r\n\t    // 3.\r\n\t    // setup noVNC proxy\r\n\t    for (var idx = 0; idx < vncs.length; idx ++) {\r\n\t    \tvar vncstrs = vncs[idx].split(':');\r\n\t    \tvar vnchost = vncstrs[0];\r\n\t    \tvar vncport = vncstrs[1] ? \r\n\t    \t\t\t      parseInt(vncstrs[1], 10) : \r\n\t    \t\t\t      5900; // default VNC port\r\n\r\n\t    \t// assume vncserver listen on 5900 above\r\n\t    \tvncport = (vncport < 5900) ? 5900 + vncport : vncport;\r\n\r\n\t    \t// add VNC host proxy entry\r\n\t    \tself.addVNC({host: vnchost, port: vncport});\r\n\t    }\r\n\t    \r\n\t    // 4.\r\n\t    // create http App\r\n\t    var appHttp = Connect();\r\n\t    \r\n\t    // 4.1\r\n\t    // add third-party connect middle-ware\r\n\t    // TBD...\r\n\t    \r\n\t    // 4.2\r\n\t    // add noVNC web service in App\r\n\t    appHttp.use(noVNC.webServer({auth: basicauth, upload: fileupload}));\r\n\t    \r\n\t    // 5.\r\n\t    // hook http App on name-client\r\n\t    nmcln.bsrv.srv.on('request', appHttp);\r\n\t    \r\n\t    // 5.1\r\n\t    // handle http CONNECT request in case come from forward proxy\r\n        // !!! just create connection to peer-vnc httpps server self.\r\n\t    nmcln.bsrv.srv.on('connect', function(req, socket, head) {\r\n            var roptions = {\r\n\t\t\t        port: nmcln.port,\r\n\t\t\t        host: nmcln.ipaddr,\r\n                localAddress: {\r\n                    addr: nmcln.ipaddr\r\n                }\r\n\t        };\r\n            \r\n            // check req.url\r\n            if (!(req.url && nmcln.vurl.match((req.url.split(':'))[0]))) {\r\n                console.log('invalid proxed url: '+req.url);\r\n                socket.end();\r\n                return;\r\n            }\r\n            \r\n            if (Debug) console.log('http tunnel proxy, connect to self %s:%d for %s', nmcln.ipaddr, nmcln.port, req.url);\r\n            \r\n            var srvSocket = UDT.connect(roptions, function() {\r\n                if (Debug) console.log('http tunnel proxy, got connected!');   \r\n                \r\n                ///srvSocket.write(head);\r\n\t\t\t    socket.pipe(srvSocket);\r\n\t\t\t     \r\n\t\t\t    socket.write('HTTP/1.1 200 Connection Established\\r\\n' +\r\n\t\t\t                 'Proxy-agent: Node-Proxy\\r\\n' +\r\n\t\t\t                 '\\r\\n');\t\t\t\t\t    \r\n\t\t\t    srvSocket.pipe(socket);\r\n            });\r\n            \r\n\t\t    srvSocket.on('error', function(e) {\r\n\t\t        console.log(\"http tunnel proxy, socket error: \" + e);\r\n\t\t        socket.end();\r\n\t\t    });\r\n\t    });\r\n\t    \r\n\t    // 6.\r\n\t    // pass proxy URLs back\r\n\t    fn(null, self.proxyURL);\r\n\t});\r\n\t\r\n\t// 2.2\r\n\t// check error\r\n\tnmcln.on('error', function(err){\r\n\t    console.log('name-client create failed:'+JSON.stringify(err));\r\n\t    fn(err);\r\n\t});\r\n};\r\n\r\n// add VNC host:port entry\r\n// - vnc: {host: x, port: x}\r\n// - return proxy vURL\r\nProxy.prototype.addVNC = function(vnc) {\r\n    var self = this;\r\n    \r\n    \r\n    // 0.\r\n    // check vnc host/port\r\n    if (!(vnc && \r\n    \t (typeof vnc.host === 'string') && \r\n    \t (typeof vnc.port === 'number'))) {\r\n        console.log('invalid VNC host '+JSON.stringify(vnc));\r\n        return self;\r\n    }\r\n    \r\n    // 1.\r\n    // create ws server to proxy VNC/RFB data\r\n    var vncstr = vnc.host+':'+vnc.port;\r\n\tvar wspath = '/'+vnc.host+'-'+vnc.port;\r\n\tvar vncwss = new WebSocketServer({httpp: true, server: self.nmcln.bsrv.srv, path: wspath});\r\n\t\r\n\tvncwss.on('connection', noVNC.tcpProxy({host: vnc.host, port: vnc.port}));\r\n\r\n\tself.proxyWss[vncstr] = vncwss;\r\n\tself.proxyURL[vncstr] = self.nmcln.vurl + wspath;\r\n\t\t\r\n\t// 2.\r\n\t// report peer-service\r\n\t// like {vurl:x,cate:x,name:x,desc:x,tags:x,acls:x,accounting:x,meta:x}\r\n\tself.nmcln.reportService({\r\n\t\tvurl: self.proxyURL[vncstr],\r\n\t\tcate: 'peer-vnc',\r\n\t\tname: 'vnc'+Object.keys(self.proxyWss).length,\r\n\t\tmeta: {\r\n\t\t\t\tvnchost: vnc.host === 'localhost' ? OS.hostname() : vnc.host,\r\n\t\t\t\tvncport: vnc.port\r\n\t\t\t}\r\n\t});\r\n\t\r\n\t// 3.\r\n\t// update peer-service: connection loss, etc\r\n\t// TBD...\r\n\t    \r\n\treturn self.proxyURL[vncstr];\r\n};\r\n\r\n// remove VNC host:port entry\r\n// - vnc: {host: x, port: x}\r\nProxy.prototype.removeVNC = function(vnc, fn) {\r\n    var self = this;\r\n    \r\n    \r\n    // 0.\r\n    // check vnc host/port\r\n    if (!(vnc && \r\n    \t (typeof vnc.host === 'string') && \r\n    \t (typeof vnc.port === 'number'))) {\r\n        console.log('invalid VNC host '+JSON.stringify(vnc));\r\n        return self;\r\n    }\r\n    \r\n    // 1.\r\n    // close websocket proxy server\r\n    var vncstr = vnc.host+':'+vnc.port;\r\n    \r\n    if (self.proxyWss[vncstr]) {\r\n    \tself.proxyWss[vncstr].close();\r\n\r\n    \t// 2.\r\n    \t// remove proxy URL after 2s\r\n    \tsetTimeout(function(){\r\n    \t\tself.proxyWss[vncstr] = null;\r\n    \t\tself.proxyURL[vncstr] = null;\r\n    \t}, 2000);\r\n    }\r\n    \r\n    return self;\r\n};\r\n\r\n// simple test \r\n/*\r\nvar server = new Proxy(['192.188.1.101:5900'], function(err, proxyURL){\r\n        console.log('VNC                   Proxy URL(please open it on browser)');\r\n        for (var k in proxyURL) {\r\n            console.log(k+'        '+proxyURL[k]);\r\n        }\r\n    });\r\n*/\r\n","/home/travis/build/npmtest/node-npmtest-peer-vnc/node_modules/peer-vnc/novnc.js":"// noVNC port of Node.js\r\n// Copyright (c) 2013 Tom Zhou<iwebpp@gmail.com>\r\n\r\nvar Connect = require('connect'),\r\n    Net = require('net'),\r\n    Buffer = require('buffer').Buffer,\r\n    Fs = require('fs'),\r\n    WSS = require('wspp').Stream;\r\n\r\n// authentication module\r\nvar httpauth = require('http-auth');\r\n\r\n// file upload module\r\nvar multipart = require('connect-multiparty');\r\n\r\n\r\n// Debug level\r\nvar Debug = 0;\r\n\r\n// web server\r\nvar webServer = module.exports.webServer = function(options) {\r\n\tvar app = Connect();\r\n\tvar auth = (options && options.auth) || false;\r\n\tvar upload = (options && options.upload) || __dirname + '/upload/';\r\n\r\n\t// rewrite req.url to remove vToken string\r\n\tvar vtokenregex = /\\/vtoken\\/([0-9]|[a-f]){16}/gi;\r\n\r\n\tapp.use(function(req, res, next){\r\n\t    if (vtokenregex.test(req.url)) {\r\n\t        res.writeHead(301, {'location': req.url.replace(vtokenregex, '')});\r\n\t        res.end();\r\n\t    } else {\r\n\t        next();\r\n\t    }\r\n\t});\r\n\r\n\t// basic-auth middleware\r\n\tif (auth) {\r\n\t\tvar basic = httpauth.basic({\r\n\t\t\trealm: \"iwebpp.com\"\r\n\t\t}, function (username, password, callback) {\r\n\t\t\tcallback(username === auth.username && password === auth.password);\r\n\t\t});\r\n\r\n\t\tapp.use(httpauth.connect(basic));\r\n\t}\r\n\r\n\t// file upload middleware\r\n\tif (upload) {\r\n\t\tvar upapp = Connect();\r\n\t\tvar multipartMiddleware = multipart({uploadDir: upload});\r\n\r\n\t\tupapp.use(multipartMiddleware);\r\n\t\tupapp.use(function(req, res) {\r\n\t\t\t///console.log(req.body, req.files);\r\n\r\n\t\t\tif (typeof req.files.file === 'object') {\r\n\t\t\t\t// rename file as timestamp_originalfilename\r\n\t\t\t\tvar newname = '' + Date.now() + '__' + req.files.file.originalFilename;\r\n\t\t\t\tvar newpath = upload + '/' + newname;\r\n\t\t\t\tFs.rename(req.files.file.path, newpath, function(err) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tres.writeHeader(501);\r\n\t\t\t\t\t\tres.end('upload rename failed');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres.writeHeader(200, {'content-type': 'application/json'});\r\n\t\t\t\t\t\treq.files.file.newname = newname;\r\n\t\t\t\t\t\treq.files.file.newpath = newpath;\r\n\t\t\t\t\t\tres.end(JSON.stringify(req.files));\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tres.writeHeader(200, {'content-type': 'application/json'});\r\n\t\t\t\tres.end(JSON.stringify(req.files));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tapp.use('/upload', upapp);\r\n\t}\r\n\r\n\t///app(Connect.staticCache({maxLength: 256*1024, maxObjects: 8}))\r\n\tapp.use(Connect.static(__dirname+'/front'));\r\n\r\n\tapp.use(function(req, res){\r\n\t    res.writeHeader(200, {'content-type': 'text/html'});\r\n\t    res.end(Fs.readFileSync(__dirname+'/front/novnc.html'));\r\n\t});\r\n\r\n\treturn app;\r\n};\r\n\r\n// ws2tcp proxy\r\n// vnc: {host: ..., port: ...}, VNC server info\r\nvar tcpProxy = module.exports.tcpProxy = function(vnc){\r\n    vnc = vnc || {};\r\n\r\n    vnc.host = vnc.host || 'localhost';\r\n    vnc.port = vnc.port || 5900;\r\n\r\n\tif (Debug) console.log('connect to vnc %j ...', vnc);\r\n\r\n    return function(ws){\r\n    \t// create tcp connection to VNC server\r\n    \tvar ts = Net.connect(vnc, function(){\r\n    \t\tif (Debug) console.log('tcp connection...');\r\n\r\n    \t\t// wrap stream on ws\r\n    \t\tvar wss = new WSS(ws);\r\n\r\n    \t\t// pipe each other\r\n    \t\twss.pipe(ts);\r\n    \t\tts.pipe(wss);\r\n\r\n    \t\t// check error\r\n    \t\twss.on('error', function(){\r\n    \t\t\tif (Debug) console.log('ws.onerror...');\r\n    \t\t\tts.end();\r\n    \t\t});\r\n    \t});\r\n\r\n    \t// check error\r\n    \tws.on('error', function(){\r\n    \t\tif (Debug) console.log('ws.onerror...');\r\n    \t\tts.end();\r\n    \t});\r\n    \tts.on('error', function(err){\r\n    \t\tif (Debug) console.log('tcp connection error '+err);\r\n    \t\tws.close();\r\n    \t});\r\n    };\r\n};\r\n\r\n// simple test\r\n/*var http = require('http'),\r\n    WebSocket = require('wspp'),\r\n    WebSocketServer = WebSocket.Server;\r\n\r\nvar srv = http.createServer(webServer());\r\nsrv.listen(5600);\r\nconsole.log('noVNC proxy server listening on 5600');\r\n\r\nvar wss = new WebSocketServer({server: srv, path: '/peervnc'});\r\nwss.on('connection', tcpProxy({host: '192.188.1.101', port: 5900}));\r\n*/\r\n"}